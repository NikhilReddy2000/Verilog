'define TRUE 1'b1
'define FALSE 1'b0

'define RED 2'b0
'define YELLOW 2'b1
'define GREEN 2'b2

'define S0 3'd0
'define S1 3'd1
'define S2 3'd2
'define S3 3'd3
'define S4 3'd4

'define Y2RDelay 3
'define R2GDelay 2

module signalcontrol(hwy,cntry,clk,clr,x)
  output reg[1:0] hwy,cntry;
  input x,clock,clear;
  
  //internal state variables
  reg [2:0] state;
  reg [2:0] nextstate;
  
  initial 
    begin
      state= 'S0;
      nextstate= 'S0;
      hwy='GREEN;
      cntry='RED;
    end
  
  always @(posedge clk)
    state= nextstate;
  end
  
  always @(state)
    begin
    	case(state)
          'S0 :begin
            	hwy='GREEN;
            	cntry='RED;
          end
          
          'S1 :begin
            	hwy='YELLOW;
            	cntry='RED;
          end
            
           'S2 :begin 
             	hwy='RED;
             	cntry="RED;
           end
             
             'S3:begin
               	hwy='RED;
               	cntry='GREEN;
             end
               
               'S4 :begin
                 	hwy='RED;
                 	cntry='YELLOW;
               end
        endcase
    end
  
  always @(state,clear,x)
    begin
      if(clear)
        nextstate='S0;
      else
        case(state)
          'S0: if(x)
            	nextstate='S1;
          else
            nextstate='S0;
          
          'S1: begin
            repeat(Y2RDelay) @(posedge);
            nextstate='S2;
          end
          
          'S2: begin
            repeat(R2GDelay) @(posedge);
            nextstate='s3;
          end
          
          'S3: if(x)
            	nextstate='S3;
          	else
              	nextstate='S4;
          
          'S4: begin
            repeat(Y2RDelay) @(posedge);
            nextstate='S0;
            
          end
          default; nextstate='S0;
        endcase
    end
endmodule
